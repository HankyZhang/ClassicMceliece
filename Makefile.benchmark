# Makefile for Classic McEliece Benchmark Comparison
# Build both our implementation and reference implementation for performance testing

CC = clang
CFLAGS = -O2 -g -Wall -Wextra -Wno-unused-parameter -Wno-sign-compare
INCLUDES = -I. -Imceliece6688128/ -Imceliece6688128/subroutines/

# Our implementation sources
OUR_SOURCES = \
    mceliece_keygen.c \
    mceliece_shake.c \
    mceliece_gf.c \
    mceliece_poly.c \
    mceliece_matrix_ops.c \
    mceliece_genpoly.c \
    reference_shake.c \
    mceliece_vector.c \
    mceliece_decode.c \
    mceliece_encode.c \
    controlbits.c \
    kat_drbg.c \
    rng.c \
    mceliece_kem.c

# Reference implementation sources
REF_SOURCES = \
    mceliece6688128/gf.c \
    mceliece6688128/benes.c \
    mceliece6688128/controlbits.c \
    mceliece6688128/root.c \
    mceliece6688128/util.c \
    mceliece6688128/transpose.c \
    mceliece6688128/operations.c \
    mceliece6688128/pk_gen.c \
    mceliece6688128/sk_gen.c \
    mceliece6688128/encrypt.c \
    mceliece6688128/decrypt.c \
    mceliece6688128/bm.c \
    mceliece6688128/synd.c

# Third-party sources
THIRD_PARTY_SOURCES = \
    mceliece6688128/third_party/KeccakCodePackage/lib/high/Keccak/FIPS202/SimpleFIPS202.c

# Benchmark-specific sources
BENCHMARK_SOURCES = \
    benchmark_timing.c \
    benchmark_comparison.c

# KAT benchmark sources
KAT_BENCHMARK_SOURCES = \
    benchmark_timing.c \
    kat_benchmark.c

# All sources combined
ALL_SOURCES = $(OUR_SOURCES) $(REF_SOURCES) $(THIRD_PARTY_SOURCES) $(BENCHMARK_SOURCES)
KAT_ALL_SOURCES = $(OUR_SOURCES) $(REF_SOURCES) $(THIRD_PARTY_SOURCES) $(KAT_BENCHMARK_SOURCES)

# Target executables
TARGET = benchmark_comparison
KAT_TARGET = kat_benchmark

# Libraries
LIBS = -lm

# Default target
all: $(TARGET) $(KAT_TARGET)

$(TARGET): $(ALL_SOURCES)
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $^ $(LIBS)

$(KAT_TARGET): $(KAT_ALL_SOURCES)
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $^ $(LIBS)

# KAT benchmark with actual KAT data - most accurate comparison
run_kat_benchmark: $(KAT_TARGET)
	@echo "=== Running KAT-based Benchmark ==="
	./$(KAT_TARGET) -f mceliece6688128/kat_kem.req -n 5 -o kat_benchmark_results.csv

# KAT benchmark with more test vectors
run_kat_extended: $(KAT_TARGET)
	@echo "=== Running Extended KAT Benchmark ==="
	./$(KAT_TARGET) -f mceliece6688128/kat_kem.req -o kat_extended_results.csv

# Synthetic benchmark - generates own seeds
run_synthetic: $(TARGET)
	@echo "=== Running Synthetic Benchmark ==="
	./$(TARGET) -n 10 -o synthetic_results.csv

# Performance benchmark - multiple iterations with synthetic data
run_performance: $(TARGET)
	@echo "=== Running Performance Benchmark ==="
	./$(TARGET) -n 25 -o performance_results.csv

# Quick benchmark - just a few iterations for testing
run_quick: $(TARGET) $(KAT_TARGET)
	@echo "=== Running Quick Synthetic Benchmark ==="
	./$(TARGET) -n 3
	@echo ""
	@echo "=== Running Quick KAT Benchmark ==="
	./$(KAT_TARGET) -f mceliece6688128/kat_kem.req -n 2

# Extended benchmark - many iterations for statistical significance
run_extended: $(TARGET)
	@echo "=== Running Extended Benchmark ==="
	./$(TARGET) -n 100 -o extended_results.csv

# Complete benchmark suite - all tests
run_all_benchmarks: $(TARGET) $(KAT_TARGET)
	@echo "=== Running Complete Benchmark Suite ==="
	@echo "1. Quick synthetic test..."
	./$(TARGET) -n 5 -o quick_synthetic.csv
	@echo "2. KAT-based test..."
	./$(KAT_TARGET) -f mceliece6688128/kat_kem.req -n 5 -o quick_kat.csv
	@echo "3. Extended synthetic test..."
	./$(TARGET) -n 50 -o extended_synthetic.csv
	@echo "Benchmark suite complete. Results saved to *.csv files."

# Clean build artifacts
clean:
	rm -f $(TARGET) $(KAT_TARGET) *.csv *.log

# Help target
help:
	@echo "Available targets:"
	@echo "  all                - Build both benchmark tools"
	@echo "  run_quick          - Quick benchmark (synthetic + KAT)"
	@echo "  run_kat_benchmark  - KAT-based benchmark (5 KAT vectors)"
	@echo "  run_kat_extended   - Extended KAT benchmark (all vectors)"
	@echo "  run_synthetic      - Synthetic benchmark (10 iterations)"
	@echo "  run_performance    - Performance benchmark (25 iterations)"
	@echo "  run_extended       - Extended benchmark (100 iterations)"
	@echo "  run_all_benchmarks - Complete benchmark suite"
	@echo "  clean              - Clean build artifacts"
	@echo "  help               - Show this help"

.PHONY: all clean help run_quick run_kat_benchmark run_performance run_extended
